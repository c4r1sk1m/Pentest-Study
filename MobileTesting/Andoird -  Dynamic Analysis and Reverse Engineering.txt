1. Start the Drozer agent on the android device. This can be done in "infrastructure" mode; where you provide a remote end point that can service multiple connections
    for exploitation, or direct mode, where you can connect to the agent's embedded server using adb and port forwarding. For this exercise, we will connect
    using the direct mode. This can be accomplished by opening up the Drozer agent from the Android devicce and clicking the "off" button in the bottom-right corner of the app window.
    This will start a TCP listern on prot 31415. If it is already on, then skip this step.

2. Next, set up TCP forwarding to the Drozer agent from your laptop using adb:
    adb -s <device name> forward tcp:31415

3. Then execute drozer.bat command to connect to the agent from the console:
    drozer.bat console connect 

4. If the console connection was successful, your cursor should be blinking next to the dz> console prompt
    Use the list command to display a full list of sppported commands, and use the help <command> to see arguments and helpful information

5. The package we are looking for is called jakhar.aseem.diva. Now run the package info utility. This will extract the information abou the app
    such as version information, where the application stores its data, and the application permissions, like waht the app can done

6. Next, let's look at the attack surface frot eh application to see what is expose to other applications on the device. Vulnerabilities exposed through the Android IPC mechanism could leak
    sensitive data and be at risk of comprommises. The IPC mechanisms in Android include inetents, binders, and broadcast receivers, which we discussed earlier
    in the chapter. The output shows one content provider, which can be investigated futher to find how it is organized to see if we can extract any information from it

7. Next we rn the scanner.provider.finduris to find out the content uniform resource identifiers (URIs) we can query. Then we can try and query the content of
    using app.provider.query with the --vertical flag, which displays the results up and down. 

8. Android applications use SQLite databases for storing data, whichc an be queried using typical SQL query commands. SQLite databases .db are flat files stored
    on the file system. Content providres can be susceptible to SQL injections. app.provider.query command can be used to evaluate the SQL statement used to query the DB

9. Drozer also includes a command to scan for injection Vulnerabilities in content providers, called:
    scanner.provider.injection